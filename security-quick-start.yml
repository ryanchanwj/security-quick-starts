AWSTemplateFormatVersion: "2010-09-09"
Description: AWS Basic Security Quick Starts 

Mappings: 
  
  Settings:
    FrequencyMapConfig:
      1Hour   : One_Hour
      3Hours  : Three_Hours
      6Hours  : Six_Hours
      12Hours : Twelve_Hours
      24Hours : TwentyFour_Hours
    FrequencyMapGuardDuty: 
      15Minutes: FIFTEEN_MINUTES
      1Hour: ONE_HOUR
      6Hours: SIX_HOURS
   

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Parameters: 
          - Email
      - Label: 
          default: IAM Access Analyzer
        Parameters: 
          - EnableAnalyzer
          - AnalyzerName
        
      - Label: 
          default: CloudWatch Billing Alarms
        Parameters: 
          - EnableBillingAlarm
          - AlarmThreshold
          - Currency
      - Label: 
          default: Amazon GuardDuty 
        Parameters: 
          - EnableGuardDuty 
          - GuardDutyPublishingFrequency

      - Label: 
          default: AWS Security Hub
        Parameters: 
          - EnableSecurityHub
          - Frequency 
          - DeliveryChannelName 
        
      - Label: 
          default: AWS CloudTrail 
        Parameters: 
          - EnableCloudTrail
      - Label: 
          default:  MFA
        Parameters: 
          - EnableMFA
      - Label: 
          default: S3 Block Public Access 
        Parameters: 
          - EnableS3BlockPublicAccess
      - Label: 
          default: AWS WAF
        Parameters: 
        - EnableWAF
      
Parameters:
  #IAM Access Analyzer 
  EnableAnalyzer: 
    AllowedValues: 
      - "true"
      - "false"
    Default: "true"
    Description: "Creates IAM access analyzer resource to identify unintended access to your resources and data."
    Type: String
  AnalyzerName: 
    Default: "QuickStartAnalyser"
    Description: "The name of the IAM Access Analyzer."
    Type: String
  #Billing Alarm
  EnableBillingAlarm: 
    AllowedValues: 
      - "true"
      - "false"
    Default: "true"
    Description: "Creates Billing Alarm for estimated charges and detect anomaly spending."
    Type: String
  AlarmThreshold: 
    Type: Number
    Default: 100 
    Description: "The threshold for a billing alarm to be triggered."
  Currency: 
    Type: String
    AllowedValues:
      - "AUD"
      - "BRL"
      - "CAD"
      - "CHF"
      - "CNY"
      - "DKK"
      - "EUR"
      - "GBP"
      - "HKD"
      - "JPY"
      - "KRW"
      - "NOK"
      - "NZD"
      - "SEK"
      - "SGD"
      - "trD"
      - "ZAR"
      - "USD  "
    Default: "USD"
    Description: Enter currency unit to use for billing alarms.
  Email: 
    Type: String
    Description: Enter the email to subscribe to billing and config notifications.
    Default: ''
  #GuardDuty 
  EnableGuardDuty: 
    AllowedValues: 
      - "true"
      - "false"
    Default: "true"
    Description: "Enables GuardDuty to detect threats and monitor AWS account for malicious activity."
    Type: String
  GuardDutyPublishingFrequency:
    AllowedValues: 
      - 15Minutes
      - 1Hour
      - 6Hours
    Default: 15Minutes
    Description: "Specifies how frequently updated findings are exported."
    Type: String
  #SecurityHub
  EnableSecurityHub: 
    AllowedValues: 
      - "true"
      - "false"
    Default: "true"
    Description: "Enables Security Hub that performs security best practice checks."
    Type: String
  Frequency:
    Type: String
    Default: 24Hours
    Description: The frequency with which AWS Config delivers configuration snapshots.
    AllowedValues:
      - 1Hour
      - 3Hours
      - 6Hours
      - 12Hours
      - 24Hours
  DeliveryChannelName:
    Type: String
    Default: <Generated>
    Description: The name of the delivery channel. A name for the delivery channel. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the delivery channel name
  
  #CloudTrail 
  EnableCloudTrail: 
    AllowedValues: 
      - "true"
      - "false"
    Default: "true"
    Description: "Enables AWS CloudTrail to ensure governance, compliance and operational and risk auditing of AWS account."
    Type: String
  #S3BlockPublicAccess 
  EnableS3BlockPublicAccess: 
    AllowedValues: 
      - "true"
      - "false"
    Default: "true"
    Description: "Turn on account level S3 Block Public Access."
    Type: String
  #MFA
  EnableMFA: 
    AllowedValues: 
      - "true"
      - "false"
    Default: "true"
    Description: "Create IAM group with enforce MFA policy attached"
    Type: String 

  #WAF
  EnableWAF: 
    AllowedValues: 
        - "true"
        - "false"
    Default: "true"
    Description: "Enable WAF with managed rules" 
    Type: String 
Conditions: 
    AnalyzerEnabled: !Equals
      - !Ref EnableAnalyzer
      - 'true'
    BillingAlarmEnabled: !Equals
      - !Ref EnableBillingAlarm 
      - 'true'
    GuardDutyEnabled: !Equals 
      - !Ref EnableGuardDuty
      - 'true'
    SecurityHubEnabled: !Equals 
      - !Ref EnableSecurityHub
      - 'true'
    IsGeneratedDeliveryChannelName: !Equals
      - !Ref DeliveryChannelName
      - <Generated>
    CloudTrailEnabled: !Equals 
      - !Ref EnableCloudTrail 
      - 'true'
    S3BlockPublicAccessEnabled: !Equals 
      - !Ref EnableS3BlockPublicAccess
      - 'true'
    WAFEnabled: !Equals 
      - !Ref EnableWAF
      - 'true'
Resources:
  ##IAM access analyzer
  Analyzer:
    Condition: AnalyzerEnabled
    Type: AWS::AccessAnalyzer::Analyzer
    Properties:
      AnalyzerName: !Ref AnalyzerName
      Type: ACCOUNT
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  ##Billing Alarm threshold
  BillingAlarm: 
    Condition: BillingAlarmEnabled
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmDescription: Billing Alarm for Security Quick Start 
      AlarmName: Billing Alarm 
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1 
      MetricName: Estimated Charges
      Dimensions: 
        - Name: Currency 
          Value: !Ref Currency
      AlarmActions: 
        - !Ref BillingAlertTopic 
      Period: 3600
      Threshold: !Ref AlarmThreshold
      Namespace: AWS/Billing
      Statistic: Maximum     
  #SNS topic for billing alarm 
  BillingAlertTopic: 
    Condition: BillingAlarmEnabled
    Type: AWS::SNS::Topic 
  
  AlarmSubscriberEmail: 
    Condition: BillingAlarmEnabled
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: !Ref Email 
      Protocol: email 
      TopicArn: !Ref BillingAlertTopic 
  ##Billing Alarm anomaly detector
  AnomalyDetector: 
    Condition: BillingAlarmEnabled
    Type: AWS::CloudWatch::AnomalyDetector 
    Properties: 
      MetricName: AnomalyDetector 
      Namespace: AWS/Billing
      Stat: Sum
  
  AnomalyAlarm: 
    Condition: BillingAlarmEnabled
    Type: AWS::CloudWatch::Alarm 
    Properties: 
      AlarmDescription: Anomaly Detector for Security Quick Start
      AlarmName: Anomaly Detector 
      ComparisonOperator: LessThanLowerOrGreaterThanUpperThreshold
      EvaluationPeriods: 1 
      Metrics: 
        - Expression: ANOMALY_DETECTION_BAND(m1, 2)
          Id: ad1
        - Id: m1 
          MetricStat: 
            Metric: 
              MetricName: AnomalyDetector 
              Namespace: AWS/Billing
            Period: 3600
            Stat: Sum 
      ThresholdMetricId: ad1
      AlarmActions: 
        - !Ref BillingAlertTopic 
  
  ##GuardDuty 
  GuardDutyDetector:
    Condition: GuardDutyEnabled
    Type: AWS::GuardDuty::Detector
    Properties: 
      Enable: true
      # An enum value that specifies how frequently updated findings are exported.
      FindingPublishingFrequency:  !FindInMap
          - Settings 
          - FrequencyMapGuardDuty 
          - !Ref GuardDutyPublishingFrequency
  EventRule:
    Condition: GuardDutyEnabled
    Type: AWS::Events::Rule
    Properties:
      Name: "detect-guardduty-finding"
      Description: "A CloudWatch Event Rule that triggers on Amazon GuardDuty findings. The Event Rule can be used to trigger notifications or remediative actions using AWS Lambda."
      State: "ENABLED"
      Targets:
        - Arn:
            Ref: "SnsTopicEventRule"
          Id: "target-id1"
          InputTransformer: 
            InputPathsMap: 
              "severity": "$.detail.severity"
              "Finding_ID": "$.detail.id"
              "instanceId": "$.detail.resource.instanceDetails.instanceId"
              "port": "$.detail.service.action.networkConnectionAction.localPortDetails.port"
              "eventFirstSeen": "$.detail.service.eventFirstSeen"
              "eventLastSeen": "$.detail.service.eventLastSeen"
              "count": "$.detail.service.count"
              "Finding_Type": "$.detail.type"
              "region": "$.region"
              "Finding_description": "$.detail.description"
            InputTemplate: |
              "You have a severity <severity> GuardDuty finding type <Finding_Type> for the EC2 instance <instanceId> in the region <region> as the <Finding_description> on the port <port>. The first attempt was on <eventFirstSeen> and the most recent attempt on <eventLastSeen> . The total occurrence is <count>. For more details open the GuardDuty console at https://console.aws.amazon.com/guardduty/home?region=<region>#/findings?search=id%3D<Finding_ID>"       
      EventPattern:
        detail-type:
          - "GuardDuty Finding"
        source:
          - "aws.guardduty"
        detail:
          severity: 
            -  7.0
            -  7.1
            -  7.2
            -  7.3
            -  7.4
            -  7.5
            -  7.6
            -  7.7
            -  7.8
            -  7.9
            -  8.0
            -  8.1
            -  8.2
            -  8.3
            -  8.4
            -  8.5
            -  8.6
            -  8.7
            -  8.8
            -  8.9
  SnsTopicEventRule:
    Condition: GuardDutyEnabled
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref Email
          Protocol: "email"
      TopicName: "GuardDuty"
  SnsTopicPolicyEventRule:
    Condition: GuardDutyEnabled
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: "__default_statement_ID"
            Effect: "Allow"
            Principal:
              AWS: "*"
            Action:
              - "SNS:GetTopicAttributes"
              - "SNS:SetTopicAttributes"
              - "SNS:AddPermission"
              - "SNS:RemovePermission"
              - "SNS:DeleteTopic"
              - "SNS:Subscribe"
              - "SNS:ListSubscriptionsByTopic"
              - "SNS:Publish"
              - "SNS:Receive"
            Resource:
              Ref: "SnsTopicEventRule"
            Condition:
              StringEquals:
                AWS:SourceOwner:
                  Ref: "AWS::AccountId"
          - Sid: "TrustCWEToPublishEventsToMyTopic"
            Effect: "Allow"
            Principal:
              Service: "events.amazonaws.com"
            Action: "sns:Publish"
            Resource:
              Ref: "SnsTopicEventRule"
      Topics:
        - Ref: "SnsTopicEventRule"
      
  ##SecurityHub
  #SecurityHub
  SecurityHub:
    Condition: SecurityHubEnabled
    Type: AWS::SecurityHub::Hub
    
  #AWS Config
  ConfigBucket:
    Condition: SecurityHubEnabled
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  ConfigBucketPolicy:
    Condition: SecurityHubEnabled
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ConfigBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AWSConfigBucketPermissionsCheck
            Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action: s3:GetBucketAcl
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${ConfigBucket}"
          - Sid: AWSConfigBucketDelivery
            Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action: s3:PutObject
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${ConfigBucket}/AWSLogs/${AWS::AccountId}/*"
          - Sid: AWSConfigBucketSecureTransport
            Action:
              - s3:*
            Effect: Deny
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${ConfigBucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${ConfigBucket}/*"
            Principal: "*"
            Condition:
              Bool:
                aws:SecureTransport:
                  false

  ConfigTopic:
    Condition: SecurityHubEnabled
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "config-topic-${AWS::AccountId}"
      DisplayName: AWS Config Notification Topic
      KmsMasterKeyId: "alias/aws/sns"

  ConfigTopicPolicy:
    Condition: SecurityHubEnabled
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref ConfigTopic
      PolicyDocument:
        Statement:
          - Sid: AWSConfigSNSPolicy
            Action:
              - sns:Publish
            Effect: Allow
            Resource: !Ref ConfigTopic
            Principal:
              Service:
                - config.amazonaws.com

  EmailNotification:
    Condition: SecurityHubEnabled
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref Email
      Protocol: email
      TopicArn: !Ref ConfigTopic

  ConfigRecorderRole:
    Condition: SecurityHubEnabled
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWS_ConfigRole"

  ConfigRecorder:
    Condition: SecurityHubEnabled
    Type: AWS::Config::ConfigurationRecorder
    DependsOn:
      - ConfigBucketPolicy
    Properties:
      RoleARN: !GetAtt ConfigRecorderRole.Arn
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true

  ConfigDeliveryChannel:
    Condition: SecurityHubEnabled
    Type: AWS::Config::DeliveryChannel
    DependsOn:
      - ConfigBucketPolicy
    Properties:
      Name: !If
        - IsGeneratedDeliveryChannelName
        - !Ref AWS::NoValue
        - !Ref DeliveryChannelName
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: !FindInMap
          - Settings
          - FrequencyMapConfig
          - !Ref Frequency
      S3BucketName: !Ref ConfigBucket
      SnsTopicARN: !Ref ConfigTopic

        
  ##CloudTrail
  
  #Create KMS S3 bucket encryption key
  s3cloudtrailKey:
    Condition: CloudTrailEnabled
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-cloudtrails3
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow VPC Flow Logs to use the key
            Effect: Allow
            Principal:
              Service:
                - delivery.logs.amazonaws.com
            Action: 'kms:GenerateDataKey*'
            Resource: '*'
  
  s3cloudtrailKeyAlias:
    Condition: CloudTrailEnabled
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/cloudtrails3
      TargetKeyId:
        Ref: s3cloudtrailKey
    # Create CloudTrail encrypted S3 bucket for storage
  
  #Create CloudTrail S3 Bucket 
  CloudTrailS3Bucket:
    Condition: CloudTrailEnabled
    DependsOn:
        - s3cloudtrailKey
        - s3cloudtrailKeyAlias
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      Tags: 
        - Key: Name 
          Value: !Ref AWS::StackName  
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            KMSMasterKeyID: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${s3cloudtrailKeyAlias}'
            SSEAlgorithm: 'aws:kms'
  
  #Bucket Policy for CloudTrail S3 Bucket 
  CloudTrailBucketPolicy:
    Condition: CloudTrailEnabled
    DependsOn:
        - CloudTrailS3Bucket
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudTrailS3Bucket
      PolicyDocument:
        Statement:
          - Sid: "AWSCloudTrailAclCheck"
            Effect: Allow
            Principal:
              Service: 'cloudtrail.amazonaws.com'
            Action: "s3:GetBucketAcl"
            Resource: !Sub arn:aws:s3:::${CloudTrailS3Bucket}
          - Sid: "AWSCloudTrailWrite"
            Effect: Allow
            Principal:
              Service: 'cloudtrail.amazonaws.com'
            Action: "s3:PutObject"
            Resource: !Sub arn:aws:s3:::${CloudTrailS3Bucket}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'
  
  CloudTrail:
    Condition: CloudTrailEnabled
    DependsOn:
      - CloudTrailS3Bucket
      - CloudTrailBucketPolicy
    Type: AWS::CloudTrail::Trail
    Properties:
      S3BucketName: !Ref CloudTrailS3Bucket
      IsLogging: true
      EnableLogFileValidation: true
      Tags: 
        - Key: Region
          Value: !Ref AWS::Region
        

  ##MFA 
  MFAGroup: 
    Type: AWS::IAM::Group
    Properties: 
      GroupName: EnforceMFA 
  MFAPolicy: 
    DependsOn:
        - MFAGroup
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: MFAPolicy
      PolicyDocument:
        Statement:
          - Sid: AllowListActions
            Effect: Allow 
            Action: 
              - iam:ListUsers 
              - iam:ListVirtualMFADevices 
            Resource: '*'
          - Sid: AllowIndividualUserToListOnlyTheirOwnMFA
            Effect: Allow 
            Action:
              - iam:ListMFADevices 
            Resource: 
              - 'arn:aws:iam::*:mfa/*'
              - 'arn:aws:iam::*:user/${aws:username}'
          - Sid: AllowIndividualUserToManageTheirOwnMFA
            Effect: Allow 
            Action: 
              - iam:CreateVirtualMFADevice
              - iam:DeleteVirtualMFADevice
              - iam:EnableMFADevice
              - iam:ResyncMFADevice
            Resource: 
              - 'arn:aws:iam::*:mfa/${aws:username}'
              - 'arn:aws:iam::*:user/${aws:username}'
          - Sid: AllowIndividualUserToDeactivateOnlyTheirOwnMFAOnlyWhenUsingMFA
            Effect: Allow 
            Action: 
              - iam:DeactivateMFADevice 
            Resource: 
              - 'arn:aws:iam::*:mfa/${aws:username}'
              - 'arn:aws:iam::*:user/${aws:username}'
            Condition: 
              Bool: 
                aws:MultiFactorAuthPresent: true
          - Sid: BlockMostAccessUnlessSignedInWithMFA
            Effect: Deny
            NotAction:
              - iam:CreateVirtualMFADevice
              - iam:EnableMFADevice
              - iam:ListMFADevices
              - iam:ListUsers
              - iam:ListVirtualMFADevices
              - iam:ResyncMFADevice
              
            Resource: '*'
            Condition: 
              BoolIfExists: 
                aws:MultiFactorAuthPresent: false
          
      Groups: 
        - EnforceMFA 


  ##S3 Block Public Access
  S3BlockPublicAccess:
      Condition: S3BlockPublicAccessEnabled
      Type: "Custom::S3BlockPublicAccess"
      Properties:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
        ServiceToken:
          Fn::GetAtt:
            - "S3BlockPublicAccessLambda"
            - "Arn"
  
  S3BlockPublicAccessLambdaRole:
    Condition: S3BlockPublicAccessEnabled
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "s3inline"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutAccountPublicAccessBlock"
                  - "s3:GetAccountPublicAccessBlock"
                Resource: "*"
  
  S3BlockPublicAccessLambda:
    Condition: S3BlockPublicAccessEnabled
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::Sub:
            - "asecure-cloud-cf-aux-${Region}"
            - Region:
                Ref: "AWS::Region"
        S3Key: "s3-block-public-access-lambda.zip"
      Handler: "index.handler"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "S3BlockPublicAccessLambdaRole"
          - "Arn"
      Runtime: "nodejs14.x"
      Timeout: 120


  AWSWAF: 
    Condition: WAFEnabled
    Type: "AWS::WAFv2::WebACL"
    Properties: 
      DefaultAction: 
        Allow: {}
      Scope: "REGIONAL"
      VisibilityConfig: 
        CloudWatchMetricsEnabled: true
        MetricName: "Waf"
        SampledRequestsEnabled: true
      Rules: 
        - Name: "BaselineRuleGroup"
          Priority: 0 
          OverrideAction: 
            None: {}
          VisibilityConfig:  
            CloudWatchMetricsEnabled: true
            MetricName: "BaselineRuleGroup"
            SampledRequestsEnabled: true
          Statement: 
            ManagedRuleGroupStatement:  
              VendorName: "AWS" 
              Name: "AWSManagedRulesCommonRuleSet"        
        - Name: "AdminProtectionGroup"
          Priority: 1 
          OverrideAction: 
            None: {}
          VisibilityConfig:  
            CloudWatchMetricsEnabled: true
            MetricName: "AdminProtectionGroup"
            SampledRequestsEnabled: true
          Statement: 
            ManagedRuleGroupStatement:  
              VendorName: "AWS" 
              Name: "AWSManagedRulesAdminProtectionRuleSet" 
        - Name: "KnownBadInputsGroup"
          Priority: 2 
          OverrideAction: 
            None: {}
          VisibilityConfig:  
            CloudWatchMetricsEnabled: true
            MetricName: "KnownBadInputsGroup"
            SampledRequestsEnabled: true
          Statement: 
            ManagedRuleGroupStatement:  
              VendorName: "AWS" 
              Name: "AWSManagedRulesKnownBadInputsRuleSet"       